import re
"""
Модуль для маскировки банковсикх реквизитов.
"""


"""
 Задание:
IT-отдел крупного банка делает новую фичу для личного кабинета клиента.
Это виджет, который показывает несколько
последних успешных банковских операций клиента.
Вам доверили реализовать этот проект,
который на бэкенде будет готовить данные для отображения в новом виджете.
"""

"""
Реализация функциальности двух функций. 

Первая функция принимает на вход номер карты,
которая в процессе должна вывести номер карты с маской.
XXXX XX** **** XXXX
X — это цифра номера.
То есть видны первые 6 цифр и последние 4 цифры.

Вторая функция принимает на вход номер счёта,
которая в процессе должна вывести номер счёта с маской.
**XXXX
X — это цифра номера.
То есть видны только последние 4 цифры.
"""


def get_mask_card_number(number_card: str) -> str:
    """
    Маскирует номер карты. Функция принимает на вход номер карты,
    которая в процессе должна вывести номер карты с маской.
    XXXX XX12** **** XXXX
    """


def mask_card_number(card_number: str) -> str:
    """
    Функция принимает тип и номер карты,
    возвращая тип и маску карты в формате: ХХХХ ХХ** **** ХХХХ
    """
    digit = re.sub(r"\D", "", card_number)
    if len(digit) != 16:
        raise ValueError("Номер карты должен состоять из 16 цифр!")

    text = re.sub(r"\d", "", card_number)
    if len(text) == 0:
        raise ValueError("Вы не ввели тип карты!")

    masked_card = f"{text}: {digit[:4]} {digit[4:6]}** **** {digit[-4:]}"
    return masked_card


def get_mask_account(account_number: int) -> str:
    """
    Маскирует номер счёта. Функция принимает на вход номер счёта,
    которая в процессе должна вывести номер счёта с маской.
    **XXXX
    """
    account_str = "".join(str(account_number))
    # маскируем при помощи срезов
    masked_account = "**" + account_str[-4:]
    return masked_account
